@using System.Globalization

@if (Event != null)
{

<div class="modal" style="@(IsVisible ? "display:flex;" : "display:none;")">
    <div class="modal-content">
        <h3>@Event.Name
            <span class="close" @onclick="OnClose"><i class="fas fa-circle-xmark"></i></span>
        </h3>

        <div class="event-time-box">
            <p><strong>Start:</strong> @Event.StartTime.ToString("MMM dd @ HH:mm")</p>
            <p><strong>Slutar:</strong> @Event.EndTime.ToString("MMM dd @ HH:mm")</p>
        </div>
        <p class="event-modal-description">@Event.Description</p>

        @if (Event.AccessType != AccessType.Free)
        {
            <p><strong>Pris:</strong> @(Event.Price)kr</p>
        }
        <p><strong>Biljetter kvar:</strong> @(Event.TicketsMax.HasValue ? (Event.TicketsMax - Event.TicketsSold + "st") : "Ej begränsat")</p>

        <p class="find-us-tab"><strong>Hitta hit:</strong> @Event.Address, @Event.City
            <a href="https://www.google.com/maps/search/?api=1&query=@Uri.EscapeDataString(Event.Address),@Uri.EscapeDataString(Event.City)"
                class="map-icon" target="_blank">
                <i class="fas fa-location-dot"></i>
            </a>
        </p>
        <iframe src="@($"https://www.google.com/maps?q={Uri.EscapeDataString(Event.Address + ' ' + Event.City)}&output=embed")"
                allowfullscreen="" loading="lazy"
                referrerpolicy="no-referrer-when-downgrade">
        </iframe>

        @if (Event.AccessType == AccessType.Free && Event.HasSeat || Event.AccessType == AccessType.Free && Event.TicketsMax.HasValue)
        {
            <button class="modal-buy-btn modal-buy-btn-transform" @onclick="() => OnGoToCheckout.InvokeAsync(Event.Id)">BOKA BILJETT</button>
        }
        else if (Event.AccessType == AccessType.Free && !Event.HasSeat)
        {
            <button class="modal-buy-btn modal-buy-btn-locked">Gratis!</button>
        }
        else 
        {
            <button class="modal-buy-btn modal-buy-btn-transform" @onclick="() => OnGoToCheckout.InvokeAsync(Event.Id)">KÖP BILJETT</button>
        }
    </div>
</div>
}

@code {
    [Parameter] public EventDto Event { get; set; } = default!;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<int> OnGoToCheckout { get; set; }
}
