@using BlazorStandAlone.Components.Login
@inject HttpClient HttpClient
@inject SessionStorageService SessionStorageService
@inject IUserService UserService

<Popup @ref="popupRef" Title="@PopupTitle" Message="@PopupMessage"></Popup>

<header id="site-header" class="header">
    <a class="logo-wrapper" href="">
        <img src="icons/logo-white.svg" alt="Logo" class="header-logo">
    </a>
    <LogInPopup @ref="loginRef" OnLogin="HandleLogin" OnRegister="HandleRegister" />
    <UserEdit @ref="userEditRef" OnEdit="HandleEdit" />

    <nav class="nav">
        @* Admin Dashboard *@ 
        @if (IsAdmin)
        {
            <NavLink class="nav-link" href="/admin">
                <i id="admin-icon" class="fa-solid fa-cog header-icons"></i> Admin
            </NavLink>
        }

        @* Event *@
        <NavLink class="nav-link" href="#event-section">
            <i id="event-icon" class="fa-solid fa-location-dot header-icons"></i> Event
        </NavLink>

        @* Boka *@
        <NavLink class="nav-link" href="#event-section">
            <i id="boka-icon" class="fa-solid fa-paper-plane header-icons"></i> Boka
        </NavLink>

        @* Login *@
        @if (isLoggedIn)
        {
            <div class="user-menu" @onclick:stopPropagation>
                <NavLink class="nav-link" @onclick="ToggleUserMenu">
                    <i id="user-icon" class="fa-solid fa-user-circle header-icons"></i> @currentUser
                </NavLink>
                @if (showUserMenu)
                {
                    <div class="popup-overlay" style="display: flex" @onclick="CloseUserMenu">
                        <div class="popup-content" @onclick:stopPropagation>
                            <div class="form-container">
                                <div class="form-wrapper">
                                    <div class="form-fields">
                                        <div class="form-group">
                                            <i class="fa-solid fa-user-circle"></i>
                                            <span>@currentUser</span>
                                        </div>
                                        <div class="form-group">
                                            <p class="ticket-info-box">Biljetter: </p>
                                            @foreach (var ticket in uniqueTickets)
                                            {
                                                <div class="ticket-container">
                                                    <div class="ticket-info"><span style="font-style: italic;">@ticket.Title</span>
                                                    </div>x @ticket.Count
                                                </div>
                                            }
                                        </div>
                                        <button class="submit-button" @onclick="OpenEditMenu">Ändra information</button>
                                        <button class="submit-button" @onclick="HandleLogout">
                                            <i class="fa-solid fa-sign-out-alt"></i>
                                            Logout
                                        </button>
                                        <p style="color:red;">OBS: Kontakta admin för att avboka biljetter eller besök arrangörens hemsida.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <NavLink class="nav-link" @onclick="ShowLogin" Match="NavLinkMatch.All">
                <i id="login-icon" class="fa-solid fa-arrow-right-to-bracket header-icons"></i> Logga in
            </NavLink>
        }
    </nav>
</header>

@code {
    private LogInPopup? loginRef;
    private Popup? popupRef;
    private UserEdit? userEditRef;
    private string PopupMessage = string.Empty;
    private string PopupTitle = "Notification";
    private bool development = true;
    private bool isLoggedIn = false;
    private bool showUserMenu = false;
    private string currentUser = string.Empty;

    private bool IsAdmin = false;


    private List<TicketDto> userTickets = new();

    private List<UserTicket> uniqueTickets = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckLoginStatus();
    }

    private async Task CheckLoginStatus()
    {
        var user = await SessionStorageService.GetItemAsync<string>("user");
        isLoggedIn = !string.IsNullOrEmpty(user);
        if (isLoggedIn)
        {
            currentUser = user;
            await GetUsersTickets();
        }
        await CheckIfAdmin();

    }

    private async Task CheckIfAdmin()
    {
        var loggedInuser = await UserService.GetUserByUsername(currentUser);

        if (loggedInuser != null && loggedInuser.Role == UserRole.Admin)
        {
            IsAdmin = true;
        }
        else
        {
            IsAdmin = false;
        }
    }

    private async Task GetUsersTickets()
    {
        try
        {
            var user = await UserService.GetUserByUsername(currentUser);
            if (user != null)
            {
                userTickets = await UserService.GetUserTickets(user.Id);
                uniqueTickets = GetUniqueTickets(userTickets);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user tickets: {ex.Message}");
            ShowPopup("Error", "Failed to load tickets. Please try again later.");
        }
    }

    private List<UserTicket> GetUniqueTickets(List<TicketDto> userTickets)
    {
        return userTickets
        .GroupBy(ticket => ticket.Title)
        .Select(group => new UserTicket
        {
            Title = group.Key,
            Price = group.First().Price,
            Count = group.Count()
        })
        .ToList();
    }

    private void ShowLogin()
    {
        loginRef?.Show();
    }

    private void ShowPopup(string title, string message)
    {
        PopupTitle = title;
        PopupMessage = message;
        popupRef?.Show();
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private void OpenEditMenu()
    {
        userEditRef?.Show();
        showUserMenu = false;
    }

    private async Task HandleLogout()
    {
        await SessionStorageService.RemoveItemAsync("user");
        userTickets.Clear();
        uniqueTickets.Clear();
        isLoggedIn = false;
        currentUser = string.Empty;
        showUserMenu = false;
    }

    private async Task HandleLogin(UserLogin user)
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/auth/login", user);

            if (response.IsSuccessStatusCode)
            {
                var newUser = await response.Content.ReadFromJsonAsync<LoginDto>();
                if (newUser != null)
                {
                    await SessionStorageService.SetItemAsync<string>("user", newUser.Username);
                    currentUser = newUser.Username;
                    await GetUsersTickets();
                    isLoggedIn = true;
                    await CheckIfAdmin();
                    loginRef?.ClosePopup();
                }
                else
                {
                    ShowPopup("Error", "Invalid login response from server.");
                    loginRef?.ClosePopup();
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowPopup("Error", $"Login failed: {errorMessage}");
                loginRef?.ClosePopup();
            }
        }
        catch (Exception ex)
        {
            ShowPopup("Error", $"An error occurred during login: {ex.Message}");
            loginRef?.ClosePopup();
        }
    }

    private async Task HandleRegister(UserRegister user)
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/auth/register", user);

            if (response.IsSuccessStatusCode)
            {
                ShowPopup("Success", "Registration successful! Welcome!");
                loginRef?.ClosePopup();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowPopup("Error", $"Registration failed: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowPopup("Error", $"An error occurred during registration: {ex.Message}");
        }
    }

    private async Task HandleEdit(UserRegister user)
    {
        try
        {
            var newUser = await UserService.GetUserByUsername(user.Username);
            if (newUser != null)
            {
                var response = await HttpClient.PutAsJsonAsync($"api/user/update/{newUser.Id}", user);
                if (response.IsSuccessStatusCode)
                {
                    ShowPopup("Success", "Information updated successfully!");
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    ShowPopup("Error", $"Failed to update information: {errorMessage}");
                }
            }
            else
            {
                ShowPopup("Error", "User not found");
            }
        }
        catch (Exception ex)
        {
            ShowPopup("Error", $"An error occurred while updating information: {ex.Message}");
        }
    }

    private void CloseUserMenu()
    {
        showUserMenu = false;
    }
}

@* Blazor being Blazor... *@
<style>
    header {
        background: transparent;
        display: flex;
        padding: 20px;
        padding-right: 50px;
        padding-left: 50px;
        width: 100%;
        justify-content: space-between;
    }

    .logo-wrapper {
        padding: 8px;
    }

    .header-logo {
        width: 110px;
        height: auto;
        position: absolute;
    }

    .header-icons {
        font-size: 20px;
        vertical-align: baseline;
        position: relative;
    }

    #admin-icon {
        top: -1px;
    }

    #event-icon {
        top: -2px;
    }

    #boka-icon {
        top: -2px;
        font-size: 19px;
    }

    #login-icon,
    #user-icon {
        font-size: 23px;
    }

    .nav {
        display: flex;
        margin-left: auto;
        padding-top: 30px;
        padding-right: 20px;
        gap: 10px;
    }

    .nav-link {
        font-size: 24px;
        padding: 16px 12px;
        text-decoration: none;
        display: inline-block;
        transition: Transform 0.4s ease-in-out;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--text-color-light);
    }

    header .nav-link:hover,
    footer a:hover,
    .nav .nav-link:hover {
        color: var(--text-color-hover);
        transform: scale(1.05);
    }

    .nav-link:link,
    .nav-link:visited {
        color: var(--text-color-light);
    }

    .user-menu {
        position: relative;
    }

    /*Userticket styling*/

    .form-fields {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .form-group {
        padding-bottom: 0px;
        margin-bottom: 0px;
    }

    .submit-button{
        margin-top: 0px;
    }

    .ticket-container {
        overflow-y: auto;
        border-bottom: 1px solid var(--home-button-color-grey);
        display: flex;
        gap: 5px;
        margin-bottom: 10px;
    }

    .ticket-info {
        flex-direction: column;
        padding-bottom: 5px;
    }

    .ticket-container:last-child {
        border-bottom: none;
        padding-bottom: 0px;
    }

    .ticket-info-box {
        padding-bottom: 10px;
    }
</style>