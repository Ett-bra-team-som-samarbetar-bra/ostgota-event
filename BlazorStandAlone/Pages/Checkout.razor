@page "/checkout/{eventId:int}"
@layout AdminLayout
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SessionStorageService SessionStorage
@inject IEventService EventService
@inject IUserService UserService

<main class="checkout-page">
    <img src="icons/favicon-black.svg" alt="Logo" class="logo">
    <img src="icons/favicon-black.svg" alt="Logo-bg" class="logo-bg">
    
    <section class="checkout-info">
        @if (eventDetails != null)
        {
            <div class="header-div">

                <h2>@eventDetails.Name</h2>
                @if (user != null)
                {
                    <p><strong>Inloggad som:</strong> @user.Username</p>
                }
                else
                {
                    <p style="color: red;">Logga in för att bekräfta köp</p>
                }
            </div>

                

            <div class="ticket-info">
                <p><strong>Plats:</strong> @eventDetails.Address, @eventDetails.City</p>
                <p><strong>Datum:</strong> @eventDetails.StartTime.ToString("MMM dd @ HH:mm")</p>

                @if (eventDetails.HasSeat)
                {
                    <div class="seat-div">

                        <label for="seat-selection"><strong>Välj plats:</strong></label>
                        <select id="seat-selection" @bind="selectedSeat">
                            @foreach (var seat in availableSeats)
                            {
                                <option value="@seat">@seat</option>
                            }
                        </select>
                    </div>
                }
                <div class="ticket-selector">
                    <p><strong>Pris:</strong> @eventDetails.Price kr / styck</p>
                    <button @onclick="DecrementTicketCount" disabled="@IsDecrementDisabled">-</button>
                    <span>@ticketCount</span>
                    <button @onclick="IncrementTicketCount" disabled="@IsIncrementDisabled">+</button>
                </div>
            </div>

            <p class="total-price">Total: @TotalPrice kr</p>
            @if (IsSoldOut)
            {
                <p style="color:red">Tyvärr, inga biljetter kvar</p>
            }

            <div class="buttons">
                   
        @if (user != null)
        {
            <button class="confirm-btn"   @onclick="Confirmation" disabled="@IsSoldOut">Bekräfta köp</button>
        } else{
            
           <button class="confirm-btn" @onclick="Confirmation" disabled>Bekräfta köp</button>
        }
                    <button class="cancel-btn" @onclick="GoBack">Gå tillbaka</button>

                </div>
            }
            else
            {
                <p>Laddar event...</p>
            }
    </section>
</main>

@code {
    async Task Confirmation()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Bekräfta för att slutföra order");
        if (confirmed)
        {
            await ConfirmPurchase();
        }
    }

    private List<string> availableSeats = new() { "A1", "A2", "B1", "B2", "C1", "C2" };
    private string selectedSeat = "A1";

    private void GoBack()
    {
        Navigation.NavigateTo("#event-section");
    }

    private UserDto? user;
    private List<UserDto>? users;
    private int ticketCount = 1;
    private EventDto? eventDetails;
    private decimal TotalPrice => ticketCount * eventDetails!.Price;
    private int remainingTickets;
    private bool IsIncrementDisabled => remainingTickets == 0 || ticketCount >= remainingTickets;
    private bool IsDecrementDisabled => ticketCount <= 1;

    private bool IsSoldOut => remainingTickets == 0;
    [Parameter] public int EventId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStorage.GetItemAsync<string>("user");

        if (result != null)
        {
            users = await UserService.GetAllUsers();
            user = users?.FirstOrDefault(u => u.Username == result);
        }

        await EventService.GetAllEvents();
        LoadEvent(EventId);
    }
    
    private void LoadEvent(int id)
    {
        eventDetails = EventService.GetEventById(id);
        if (eventDetails?.TicketsMax.HasValue == true)
        {
            remainingTickets = eventDetails.TicketsMax.Value - eventDetails.TicketsSold;
        }
    }
    private void IncrementTicketCount()
    {
        if (ticketCount < remainingTickets)
        {
            ticketCount++;
        }
    }

    private void DecrementTicketCount()
    {
        if (ticketCount > 1)
        {
            ticketCount--;
        }
    }

    private async Task ConfirmPurchase()
    {
        if (user != null)
        {
            var purchasedTickets = new List<TicketDto>();

            for (int i = 0; i < ticketCount; i++)
            {
                var ticket = new TicketDto
                {
                    UserId = user.Id,
                    EventId = EventId,
                    Seat = eventDetails!.HasSeat ? selectedSeat : null,
                    Price = eventDetails.Price,
                    Title = eventDetails.Name
                };

                var response = await Http.PostAsJsonAsync("api/ticket/create", ticket);

                if (response.IsSuccessStatusCode)
                {
                    purchasedTickets.Add(ticket);
                }
            }
            // Save the tickets to session storage for easy access in the confirmation page
            await SessionStorage.SetItemAsync("purchasedTickets", purchasedTickets);

            Navigation.NavigateTo("/confirmation");
        }
    }
}
