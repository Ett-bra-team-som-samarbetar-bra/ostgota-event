@inject NavigationManager NavigationManager
@inject SessionStorageService SessionStorage
@inject HttpClient HttpClient
@inject IUserService UserService
@inject IEventService EventService
@inject ITicketService TicketService
@using BlazorStandAlone.Components
@layout AdminLayout
@page "/admin"

<PageTitle>Admin</PageTitle>

<div class="logo-wrapper">
    <a href="">
        <img src="icons/logo-white.svg" alt="Logo" class="header-logo">
    </a>
</div>

<div class="admin-background"></div>
<h1 class="admin-title">Admin</h1>
<Popup @ref="popupRef" Title="@PopupTitle" Message="@PopupMessage"></Popup>

<div class="admin-container">
    <div class="box">
        <div class="box-header">Users: @UserService.UserCount</div>
        <div class="search-section">
            <input @bind="_userId" placeholder="Enter User ID" />
            <button @onclick="GetUserById">Search</button>
            <button @onclick="AddUser">Add User</button>
        </div>
        <div class="box-content">
            @if (_searchUser && _currentUser != null)
            {
                <div class="info-box"><strong>ID:</strong> @_currentUser.Id</div>
                <div class="info-box"><strong>Name:</strong> @_currentUser.Username</div>
                <div class="info-box"><strong>Email:</strong> @_currentUser.Email</div>
                <div class="info-box"><strong>PhoneNumber:</strong> @_currentUser.PhoneNumber</div>
                <div class="info-box"><strong>Role:</strong> @_currentUser.Role</div>
                <div class="info-box"><strong>Created at:</strong> @_currentUser.CreatedAt</div>
                <div class="user-tickets">
                    <h3>User's Tickets</h3>
                    @if (_currentUser.Tickets != null)
                    {
                        @foreach (var ticket in _currentUser.Tickets)
                        {
                            <div>
                                <div>
                                    <strong>Ticket ID:</strong> @ticket.Id
                                    <br />
                                    <strong>Title:</strong> @ticket.Title
                                </div>
                                <div><button @onclick="() => DeleteTicket(ticket.Id)">Delete</button></div>
                            </div>
                        }
                    }
                </div>
                <button @onclick="() => EditUser(_currentUser)">Edit</button>
                <button @onclick="() => DeleteUser(_currentUser.Id)">Delete</button>
                <button @onclick="ClearUser">Cancel</button>
            }
            @if (_userFormVisible)
            {
                <UserForm UserModel="@_currentUser"
                IsUserEditMode="@_isUserEditMode"
                OnSave="SaveUser"
                OnCancel="HideUserForm" />
            }
        </div>
    </div>

    <div class="box">
        <div class="box-header">Tickets: @TicketService.TicketCount</div>
        <div class="search-section">
            <input @bind="_ticketId" placeholder="Enter Ticket ID" />
            <button @onclick="GetTicketById">Search</button>
            <button @onclick="AddTicket">Add Ticket</button>
        </div>
        <div class="box-content">
            @if (_searchTicket && _currentTicket != null)
            {
                <div class="info-box"><strong>ID:</strong> @_currentTicket.Id</div>
                <div class="info-box"><strong>Title:</strong> @_currentTicket.Title </div>
                <div class="info-box"><strong>UserID:</strong> @_currentTicket.UserId</div>
                <div class="info-box"><strong>EventID:</strong> @_currentTicket.EventId</div>
                <div class="info-box"><strong>Price:</strong> @_currentTicket.Price</div>
                <div class="info-box"><strong>Seat:</strong> @_currentTicket.Seat</div>
                <button @onclick="() => DeleteTicket(_currentTicket.Id)">Delete</button>
                <button @onclick="ClearTicket">Cancel</button>
            }
            @if (_ticketFormVisible)
            {
                <TicketForm TicketModel="_currentTicket"
                OnSave="SaveTicket"
                OnCancel="HideTicketForm" />
            }
        </div>
    </div>

    <div class="box">
        <div class="box-header">Events: @EventService.EventCount</div>
        <div class="search-section">
            <input @bind="_eventId" placeholder="Enter Event ID" />
            <button @onclick="GetEventById">Search</button>
            <button @onclick="AddEvent">Add Event</button>
        </div>
        <div class="box-content">
            @if (_searchEvent && _currentEvent != null)
            {
                <div class="info-box"><strong>ID:</strong> @_currentEvent.Id</div>
                <div class="info-box"><strong>Name:</strong> @_currentEvent.Name</div>
                <div class="info-box"><strong>City:</strong> @_currentEvent.City</div>
                <div class="info-box"><strong>Address:</strong> @_currentEvent.Address</div>
                <div class="info-box"><strong>AccessType:</strong> @_currentEvent.AccessType</div>
                <div class="info-box"><strong>Start Time:</strong> @_currentEvent.StartTime</div>
                <div class="info-box"><strong>End Time:</strong> @_currentEvent.EndTime</div>
                <div class="info-box"><strong>Designated seats:</strong> @_currentEvent.HasSeat</div>
                <div class="info-box"><strong>Image path:</strong> @_currentEvent.ImagePath</div>
                <div class="info-box"><strong>Max tickets:</strong> @_currentEvent.TicketsMax</div>
                <div class="info-box"><strong>Tickets sold:</strong> @_currentEvent.TicketsSold</div>
                <div class="info-box"><strong>Price:</strong> @_currentEvent.Price</div>
                <button @onclick="() => EditEvent(_currentEvent)">Edit</button>
                <button @onclick="() => DeleteEvent(_currentEvent.Id)">Delete</button>
                <button @onclick="ClearEvent">Cancel</button>
            }
            @if (_eventFormVisible)
            {
                <EventForm EventModel="_currentEvent"
                IsEventEditMode="@_isEventEditMode"
                OnSave="SaveEvent"
                OnCancel="HideEventForm" />
            }
        </div>
    </div>
</div>

@code {
    // Page-wide
    private string? user;
    private Popup? popupRef;
    private string PopupMessage = string.Empty;
    private string PopupTitle = "Notification";
    private bool development = false;

    // User-related state
    private bool _userFormVisible;
    private bool _isUserEditMode;
    private bool _searchUser;
    private UserDto? _currentUser;
    private int _userId;

    //Event-related state
    private bool _eventFormVisible;
    private bool _isEventEditMode;
    private bool _searchEvent;
    private EventDto? _currentEvent;
    private int _eventId;

    //ticket
    private bool _ticketFormVisible;
    private bool _isTicketEditMode;
    private bool _searchTicket;
    private TicketDto? _currentTicket;
    private int _ticketId;

    //global
    protected override async Task OnInitializedAsync()
    {
        if (development)
        {
            user = "admin";
        }
        else
        {
            user = await SessionStorage.GetItemAsync<string>("user");
        }

        var loggedInUser = await UserService.GetUserByUsername(user);

        if (loggedInUser == null || loggedInUser.Role != UserRole.Admin)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        await PopulateLists();
    }

    private async Task PopulateLists()
    {
        try
        {
            await EventService.GetAllEvents();
            await TicketService.GetAllTickets();
            await UserService.GetAllUsers();
            Console.WriteLine("Lists populated successfully");
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error while populating lists: {ex}");
        }
    }

    //users
    private void GetUserById()
    {
        HideUserForm();
        var user = UserService.GetUserById(_userId);
        if (user == null)
        {
            ShowPopup("Error", "User not found");
        }
        else
        {
            _currentUser = user;
            _searchUser = true;
        }
    }

    private void EditUser(UserDto user)
    {
        _currentUser = new UserDto
            {
                Id = user.Id,
                Username = user.Username,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                Tickets = user.Tickets,
                CreatedAt = user.CreatedAt
            };
        _isUserEditMode = true;
        _userFormVisible = true;
        _searchUser = false;
    }

    private void HideUserForm() => _userFormVisible = false;

    private async Task SaveUser(UserDto user)
    {
        await HandleUserOperation(async () =>
        {
            if (_isUserEditMode)
            {
                await UserService.UpdateUserAdmin(user);
                ShowPopup("Success", "User updated successfully");
            }
            else
            {
                await UserService.CreateUser(user);
                ShowPopup("Success", "User created successfully");
            }
            HideUserForm();
            StateHasChanged();
        }, null);
    }

    private void AddUser()
    {
        ClearUser();
        _currentUser = new UserDto()
            {
                Username = null!,
                Email = null!,
                PhoneNumber = null,
                Role = UserRole.User,
                CreatedAt = DateTime.Now
            };
        _isUserEditMode = false;
        _userFormVisible = true;
    }

    private async Task DeleteUser(int id)
    {
        await HandleUserOperation(async () =>
        {
            if (await UserService.DeleteUser(id))
            {
                ClearUser();
                ShowPopup("Success", "User deleted successfully");
            }
        }, null);
    }

    private void ClearUser()
    {
        _searchUser = false;
        _currentUser = null;
        _userFormVisible = false;
    }

    private async Task HandleUserOperation(Func<Task> operation, string? successMessage)
    {
        try
        {
            await operation();
            if (!string.IsNullOrEmpty(successMessage))
            {
                ShowPopup("Success", successMessage);
            }
        }
        catch (UserServiceException ex)
        {
            ShowPopup("Error", ex.Message);
        }
        catch (Exception ex)
        {
            ShowPopup("Error", "An unexpected error occurred");
            Console.WriteLine($"Unexpected error: {ex}");
        }
    }

    private void ShowPopup(string title, string message)
    {
        PopupTitle = title;
        PopupMessage = message;
        popupRef?.Show();
    }

    //events
    private void GetEventById()
    {
        HideEventForm();
        var eventDto = EventService.GetEventById(_eventId);
        if (eventDto == null)
        {
            ShowPopup("Error", "Event not found");
        }
        else
        {
            _currentEvent = eventDto;
            _searchEvent = true;
        }
    }

    private void EditEvent(EventDto ev)
    {
        _currentEvent = new EventDto
            {
                Id = ev.Id,
                Name = ev.Name,
                Description = ev.Description,
                City = ev.City,
                Address = ev.Address,
                AccessType = ev.AccessType,
                StartTime = ev.StartTime,
                EndTime = ev.EndTime,
                HasSeat = ev.HasSeat,
                ImagePath = ev.ImagePath,
                TicketsMax = ev.TicketsMax,
                TicketsSold = ev.TicketsSold,
                Price = ev.Price
            };
        _isEventEditMode = true;
        _eventFormVisible = true;
        _searchEvent = false;
    }

    private void HideEventForm() => _eventFormVisible = false;

    private async void SaveEvent(EventDto eventDto)
    {
        await HandleEventOperation(async () =>
        {
            if (_isEventEditMode)
            {
                await EventService.UpdateEvent(eventDto);
                ShowPopup("Success", "Event updated successfully");
            }
            else
            {
                await EventService.CreateEvent(eventDto);
                ShowPopup("Success", "Event created successfully");
            }
            HideEventForm();
            StateHasChanged();
        }, null);
    }

    private void AddEvent()
    {
        ClearEvent();
        _currentEvent = new EventDto()
        {
            Name = string.Empty,
            Description = string.Empty,
            City = string.Empty,
            Address = string.Empty,
            StartTime = DateTime.Now,
            EndTime = DateTime.Now.AddHours(1),
            AccessType = AccessType.Free,
            HasSeat = false,
            ImagePath = "",
            TicketsMax = null,
            TicketsSold = 0,
            Price = 0
        };
        _isEventEditMode = false;
        _eventFormVisible = true;
    }

    private async Task DeleteEvent(int id)
    {
        await HandleEventOperation(async () =>
        {
            if (await EventService.DeleteEvent(id))
            {
                ClearEvent();
                ShowPopup("Success", "Event deleted successfully");
            }
        }, null);
    }

    private void ClearEvent()
    {
        _searchEvent = false;
        _currentEvent = null;
        _eventFormVisible = false;
    }

    private async Task HandleEventOperation(Func<Task> operation, string? successMessage)
    {
        try
        {
            await operation();
            if (!string.IsNullOrEmpty(successMessage))
            {
                ShowPopup("Success", successMessage);
            }
        }
        catch (EventServiceException ex)
        {
            ShowPopup("Error", ex.Message);
        }
        catch (Exception ex)
        {
            ShowPopup("Error", "An unexpected error occurred");
            Console.WriteLine($"Unexpected error: {ex}");
        }
    }

    //tickets
    private void GetTicketById()
    {
        HideTicketForm();
        var ticket = TicketService.GetTicketById(_ticketId);
        if (ticket == null)
        {
            ShowPopup("Error", "Ticket not found");
        }
        else
        {
            _currentTicket = ticket;
            _searchTicket = true;
        }
    }

    private void HideTicketForm() => _ticketFormVisible = false;

    private async void SaveTicket(TicketDto ticket)
    {
        await HandleTicketOperation(async () =>
        {
            await TicketService.CreateTicket(ticket);
            ShowPopup("Success", "Ticket created successfully");
            HideTicketForm();
            StateHasChanged();
        }, null);
        UserService.UpdateTickets(TicketService.Tickets);
        StateHasChanged();
    }

    private void AddTicket()
    {
        ClearTicket();
        _currentTicket = new TicketDto()
            {
                UserId = 0,
                EventId = 0,
                Price = 0,
                Seat = null
            };
        _ticketFormVisible = true;
    }

    private async Task DeleteTicket(int id)
    {
        await HandleTicketOperation(async () =>
        {
            if (await TicketService.DeleteTicket(id))
            {
                ClearTicket();
                ShowPopup("Success", "Ticket deleted successfully");
            }
        }, null);
        UserService.UpdateTickets(TicketService.Tickets);
    }

    private void ClearTicket()
    {
        _searchTicket = false;
        _currentTicket = null;
        _ticketFormVisible = false;
    }

    private async Task HandleTicketOperation(Func<Task> operation, string? successMessage)
    {
        try
        {
            await operation();
            if (!string.IsNullOrEmpty(successMessage))
            {
                ShowPopup("Success", successMessage);
            }
        }
        catch (TicketServiceException ex)
        {
            ShowPopup("Error", ex.Message);
        }
        catch (Exception ex)
        {
            ShowPopup("error", "An uenexpected error occurred");
            Console.WriteLine($"Unexpected error: {ex}");
        }
    }
}

